<LEDWidget>:
    canvas:
        # Base color
        Color:
            rgb: self.led_value
        Rectangle:
            pos: self.pos
            size: self.size
<ElectrodeWidget>:
    canvas:
        # Transparent overlay
        Color:
            rgba: 1, 1, 1, self.overlay_alpha
        Rectangle:
            pos: self.pos
            size: self.size
        # Borderline
        Color:
            rgba: 1, 1, 1, 0.2
        Line:
            points: self.x, self.y, self.x, self.y + self.height
            width: 1
    on_value: self.overlay_alpha=0.5 if self.value != 0 else 0.0
BoxLayout:
    orientation: 'vertical'
    BoxLayout:
    	orientation: 'horizontal'
        id: top_bar
        size_hint: (1, 0.2)
        canvas:
            Color:
                rgba: 1, 1, 1, 1
            Line:
                # take account of the line width
                points: self.x, self.y+2, self.x + self.width, self.y+2
                width: 2.0
        Label:
        	id: top_hud_serial_status
        	markup: True
        	serial_connected: False
        	on_serial_connected: self.text = ' '.join(('Serial:', '[color=00ff00]Connected[/color]' if self.serial_connected else '[color=ff0000]Disconnected[/color]'))
        	text: 'Serial: [color=ff0000]Disconnected[/color]'
        Label:
        	id: top_hud_report_status
        	markup: True
        	report_enabled: False
        	on_report_enabled: self.text = ' '.join(('Report:', '[color=00ff00]Enabled[/color]' if self.report_enabled else '[color=ffff00]Disabled[/color]'))
        	text: 'Report: [color=ffff00]Disabled[/color]'
        Button:
        	id: do_panic
        	on_release: app.reset_protocol_handler()
        	text: 'Panic'
        Button:
        	id: goto_settings
        	on_release: app.open_settings()
        	text: 'Settings'
    SliderWidgetLayout:
        id: slider_root
        electrodes: 32
        size_hint: (1, 0.8)
